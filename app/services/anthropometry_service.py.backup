# app/services/anthropometry_service.py

import csv
import io
from datetime import date, datetime
from decimal import Decimal, InvalidOperation
from typing import List, Dict, Any, Optional, Tuple

from dateutil.relativedelta import relativedelta
from sqlalchemy.orm import Session

from app.models import (
    IndividuoCreate,
    ResultadoProcessamentoIndividual,
    Indicador,
    ErroLinha,
    TabelaReferenciaSISVAN,
    TabelaClassificacao,
    SexoEnum
)

# ... (As funções get_reference_value e get_classification_rule não mudam) ...
def get_reference_value(db: Session, table_name: str, age_in_months: int, gender: str) -> Optional[TabelaReferenciaSISVAN]:
    indicador_map = {'pi_m': 'peso_idade', 'pi_f': 'peso_idade','ei_m': 'estatura_idade', 'ei_f': 'estatura_idade', 'imci_m': 'imc_idade', 'imci_f': 'imc_idade'}
    db_indicator_name = indicador_map.get(table_name)
    if not db_indicator_name: return None
    sexo_map = {'M': 'M', 'F': 'F'}
    db_gender = sexo_map.get(gender.upper())
    if not db_gender: return None
    return db.query(TabelaReferenciaSISVAN).filter(TabelaReferenciaSISVAN.indicador == db_indicator_name, TabelaReferenciaSISVAN.sexo == db_gender, TabelaReferenciaSISVAN.idade_meses == age_in_months).first()

def get_classification_rule(db: Session, table_name: str, age_in_months: int, z_score: float) -> Optional[str]:
    indicador_map = {'pi_m': 'peso_idade', 'pi_f': 'peso_idade', 'ei_m': 'estatura_idade', 'ei_f': 'estatura_idade','imci_m': 'imc_idade', 'imci_f': 'imc_idade'}
    db_indicator_name = indicador_map.get(table_name)
    if not db_indicator_name: return "Indicador desconhecido"
    rule = db.query(TabelaClassificacao).filter(TabelaClassificacao.indicador == db_indicator_name, TabelaClassificacao.idade_min_meses <= age_in_months, TabelaClassificacao.idade_max_meses >= age_in_months, TabelaClassificacao.z_score_min < z_score, TabelaClassificacao.z_score_max >= z_score).first()
    return str(rule.classificacao) if rule else "Classificação não encontrada"

class AnthropometryService:
    def __init__(self, db: Optional[Session]):
        self.db = db

    # ATUALIZADO: para usar data de avaliação
    def _calculate_age(self, birth_date: date, evaluation_date: date) -> Tuple[int, str]:
        if evaluation_date < birth_date:
            raise ValueError("Data de avaliação não pode ser anterior ao nascimento.")
        
        delta = relativedelta(evaluation_date, birth_date)
        age_in_months = delta.years * 12 + delta.months
        
        age_str_parts = []
        if delta.years > 0: age_str_parts.append(f"{delta.years} ano{'s' if delta.years > 1 else ''}")
        if delta.months > 0: age_str_parts.append(f"{delta.months} {'meses' if delta.months > 1 else 'mês'}")
        
        if not age_str_parts: return 0, "0 meses"
        return age_in_months, " e ".join(age_str_parts)    def _interpolate_z_score(self, value: Decimal, ref_row: TabelaReferenciaSISVAN) -> Optional[float]:
        z_scores = [-3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0]
        ref_values = [getattr(ref_row, f'valor_z_{"neg" if z < 0 else "pos"}_{abs(int(z))}' if z != 0 else 'valor_z_0') for z in z_scores]
        ref_values_decimal = [Decimal(str(v)) if v is not None else None for v in ref_values]
        
        for i in range(len(ref_values_decimal) - 1):
            lower_bound, upper_bound = ref_values_decimal[i], ref_values_decimal[i+1]
            if lower_bound is not None and upper_bound is not None and lower_bound <= value <= upper_bound:
                z_lower, z_upper = z_scores[i], z_scores[i+1]
                range_ref = upper_bound - lower_bound
                if range_ref == 0: 
                    return z_lower
                proportion = (value - lower_bound) / range_ref
                return z_lower + float(proportion) * (z_upper - z_lower)
        
        if ref_values_decimal[0] is not None and value < ref_values_decimal[0]: 
            return -3.1
        if ref_values_decimal[-1] is not None and value > ref_values_decimal[-1]: 
            return 3.1
        return None

    def _get_indicator(self, table_name: str, age_in_months: int, value: Decimal, gender: str) -> Optional[Indicador]:
        if self.db is None:
            # Para testes sem DB, retorna um indicador placeholder
            return Indicador(
                tipo=f"Teste-{table_name}",
                valor_observado=value,
                escore_z=0.0,
                classificacao="Teste - Sem DB"
            )
        
        ref = get_reference_value(self.db, table_name, age_in_months, gender)
        if not ref: return None
        z_score = self._interpolate_z_score(value, ref)
        if z_score is None: return None
        
        classification = get_classification_rule(self.db, table_name, age_in_months, z_score)
        indicador_display_map = {"pi": "Peso-para-Idade (P/I)", "ei": "Altura-para-Idade (A/I)", "imci": "IMC-para-Idade (IMC/I)"}
        display_name = indicador_display_map.get(table_name.split('_')[0], table_name)
        
        return Indicador(tipo=display_name, valor_observado=value, escore_z=round(z_score, 2), classificacao=classification or "Não aplicável")

    # ATUALIZADO: para passar a data de avaliação
    def process_individual_data(self, data: IndividuoCreate) -> ResultadoProcessamentoIndividual:
        age_in_months, age_str = self._calculate_age(data.data_nascimento, data.data_avaliacao)
        indicadores: List[Indicador] = []
        
        if age_in_months <= 120:
            p_i = self._get_indicator(f"pi_{data.sexo.value.lower()}", age_in_months, data.peso_kg, data.sexo.value)
            if p_i: indicadores.append(p_i)
        if age_in_months <= 228:
            a_i = self._get_indicator(f"ei_{data.sexo.value.lower()}", age_in_months, data.altura_cm, data.sexo.value)
            if a_i: indicadores.append(a_i)
            
        imc_decimal: Optional[Decimal] = None
        if data.altura_cm > 0:
            altura_m = data.altura_cm / Decimal(100)
            imc_decimal = data.peso_kg / (altura_m * altura_m)
            if age_in_months <= 228:
                imc_i = self._get_indicator(f"imci_{data.sexo.value.lower()}", age_in_months, imc_decimal, data.sexo.value)
                if imc_i: indicadores.append(imc_i)
        
        return ResultadoProcessamentoIndividual(
            nome=data.nome,
            sexo=data.sexo.name.capitalize(),
            data_nascimento=data.data_nascimento,
            data_avaliacao=data.data_avaliacao, # <-- CAMPO ADICIONADO
            idade=age_str,
            peso_kg=data.peso_kg,
            altura_cm=data.altura_cm,
            imc=float(round(imc_decimal, 2)) if imc_decimal is not None else None,
            indicadores=indicadores
        )

    def _parse_date_flexible(self, date_str: str) -> date:
        for fmt in ('%Y-%m-%d', '%d/%m/%Y', '%d-%m-%Y'):
            try: return datetime.strptime(date_str, fmt).date()
            except (ValueError, TypeError): continue
        raise ValueError(f"Formato de data inválido: '{date_str}'. Use AAAA-MM-DD ou DD/MM/AAAA.")

    def _parse_float_flexible(self, value_str: str) -> Decimal:
        try: return Decimal(value_str.replace(',', '.'))
        except (InvalidOperation, TypeError): raise ValueError(f"Valor numérico inválido: '{value_str}'.")

    # ATUALIZADO: para ler a coluna data_avaliacao do CSV
    def process_batch_data(self, file_contents: bytes, filename: str) -> Dict[str, Any]:
        try: decoded_content = file_contents.decode('utf-8')
        except UnicodeDecodeError: raise ValueError("Não foi possível decodificar o arquivo. Verifique se ele está no formato UTF-8.")

        sniffer = csv.Sniffer()
        try:
            dialect = sniffer.sniff(decoded_content.splitlines()[0] if decoded_content else "")
            delimiter = dialect.delimiter
        except csv.Error:
            delimiter = ',' if filename.endswith('.csv') else '\t'
        
        reader = csv.DictReader(io.StringIO(decoded_content), delimiter=delimiter)
        resultados_individuais, erros_por_linha = [], []
        
        for i, row in enumerate(reader):
            line_number = i + 2
            try:
                # Normaliza chaves do dicionário para minúsculas e sem espaços
                row_normalized = {k.strip().lower(): v for k, v in row.items()}

                nome = row_normalized.get('nome')
                data_nascimento = row_normalized.get('data_nascimento')
                data_avaliacao = row_normalized.get('data_avaliacao')
                peso_kg = row_normalized.get('peso_kg')
                altura_cm = row_normalized.get('altura_cm')
                
                if not nome:
                    raise ValueError("Nome é obrigatório")
                if not data_nascimento:
                    raise ValueError("Data de nascimento é obrigatória")
                if not data_avaliacao:
                    raise ValueError("Data de avaliação é obrigatória")
                if not peso_kg:
                    raise ValueError("Peso é obrigatório")
                if not altura_cm:
                    raise ValueError("Altura é obrigatória")
                
                individuo_data = IndividuoCreate(
                    nome=str(nome),
                    data_nascimento=self._parse_date_flexible(str(data_nascimento)),
                    data_avaliacao=self._parse_date_flexible(str(data_avaliacao)), # <-- CAMPO ADICIONADO
                    sexo=SexoEnum(row_normalized.get('sexo', '').strip().upper()),
                    peso_kg=self._parse_float_flexible(str(peso_kg)),
                    altura_cm=self._parse_float_flexible(str(altura_cm))
                )
                
                resultado = self.process_individual_data(individuo_data)
                resultados_individuais.append(resultado)

            except (ValueError, KeyError, AttributeError) as e:
                erros_por_linha.append(ErroLinha(linha=line_number, erro=str(e), dados_originais=row))
        
        return {"resultados_individuais": resultados_individuais, "erros_por_linha": erros_por_linha}

    def calculate_age_exact(self, birth_date: date, evaluation_date: date) -> Tuple[int, int, int, str, int, int]:
        """
        Calcula idade exata em anos, meses e dias, retornando também
        o total em meses e total em dias
        """
        if evaluation_date < birth_date:
            raise ValueError("Data de avaliação não pode ser anterior ao nascimento.")
        
        delta = relativedelta(evaluation_date, birth_date)
        total_months = delta.years * 12 + delta.months
        total_days = (evaluation_date - birth_date).days
        
        # Formato da string de idade
        age_str_parts = []
        if delta.years > 0:
            age_str_parts.append(f"{delta.years} ano{'s' if delta.years > 1 else ''}")
        if delta.months > 0:
            age_str_parts.append(f"{delta.months} {'meses' if delta.months > 1 else 'mês'}")
        if not age_str_parts and delta.days > 0:
            age_str_parts.append(f"{delta.days} dias")
        
        age_str = " e ".join(age_str_parts) if age_str_parts else "0 dias"
        
        return (delta.years, delta.months, delta.days, age_str, total_months, total_days)

    def calculate_imc(self, peso_kg: float, altura_cm: float) -> Optional[float]:
        """
        Calcula o IMC (Índice de Massa Corporal)
        """
        if altura_cm <= 0:
            return None
        
        altura_m = altura_cm / 100
        imc = peso_kg / (altura_m * altura_m)
        return round(imc, 2)